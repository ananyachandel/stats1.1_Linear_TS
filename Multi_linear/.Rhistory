pop_consents <- pop_consents[,- c(1,2,11)]
str(pop_consents)
library(psych)
cor(pop_consents)
psych::pairs.panels(house)
psych::pairs.panels(pop_consents)
psych::pairs.panels(pop_consents)
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE)
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE)
str(skills)
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(skills)
skills <- skills[,- c(3,4,5)]
str(skills)
skills$N_LANG <- as.factor(skills$N_LANG)
str(skills)
skills.list <- split(skills , skills$N_LANG)
View(skills.list)
View(skills.list)
View(skills.list[["1 language"]])
View(skills.list[["1 language"]])
View(skills.list[["1 language"]])
lapply(skills.list, removeColumn)
}
}
removeColumn <- function(df) {
df <- df[,- c(1)]
}
lapply(skills.list, removeColumn)
View(skills.list)
View(skills.list[["1 language"]])
removeColumn <- function(df) {
df <- df[,- c(1)]
return(df)
}
lapply(skills.list, removeColumn)
View(skills.list)
skills.list <- lapply(skills.list, removeColumn)
View(skills.list)
View(skills.list[["1 language"]])
names <- skills.list$`1 language`$GEO
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(skills)
skills <- skills[,- c(3,4,5)]
skills$N_LANG <- as.factor(skills$N_LANG)
skills.list <- split(skills , skills$N_LANG)
View(skills.list)
removeColumn <- function(df) {
df <- df[,- c(1,1)]
return(df)
}
names <- skills.list$`1 language`$GEO
skills.list <- lapply(skills.list, removeColumn)
View(skills.list)
View(skills.list[["1 language"]])
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(skills)
skills <- skills[,- c(3,4,5)]
skills$N_LANG <- as.factor(skills$N_LANG)
skills.list <- split(skills , skills$N_LANG)
removeColumn <- function(df) {
df <- df[,- c(1,2)]
return(df)
}
names <- skills.list$`1 language`$GEO
skills.list <- lapply(skills.list, removeColumn)
View(skills.list)
skills.bylang <- cbind(skills.list$`No languages`, skills.list$`1 language`, skills.list$`2 languages`, skills.list$`3 languages or more`)
View(skills.bylang)
is.data.frame(skills.bylang)
skills.bylang <- data.frame(skills.list$`No languages`, skills.list$`1 language`, skills.list$`2 languages`, skills.list$`3 languages or more`)
View(skills.bylang)
row.names(skills.bylang) <- names
View(skills.bylang)
colnames(skills.bylang) <- c(`No languages`, `1 language`, `2 languages`, `3 languages or more`)
colnames(skills.bylang) <- c(`No languages`, `1 language`, `2 languages`, `3 languages or more`)
View(skills.bylang)
skills.bylang <- data.frame(`No languages` = skills.list$`No languages`, `1 language` = skills.list$`1 language`, `2 language` =skills.list$`2 languages`, `3 language or more` = skills.list$`3 languages or more`)
skills.bylang <- data.frame(`No languages` = skills.list$`No languages`, `1 language` = skills.list$`1 language`, `2 language` =skills.list$`2 languages`, `3 language or more` = skills.list$`3 languages or more`)
skills.bylang <- data.frame(`No languages` = skills.list$`No languages`, `1 language` = skills.list$`1 language`, `2 language` =skills.list$`2 languages`, `3 language or more` = skills.list$`3 languages or more`)
row.names(skills.bylang) <- names
View(skills.bylang)
skills.bylang <- data.frame(`No languages` = skills.list$`No languages`, `One language` = skills.list$`1 language`, `Two language` =skills.list$`2 languages`, `Three language or more` = skills.list$`3 languages or more`)
row.names(skills.bylang) <- names
View(skills.bylang)
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(skills)
skills <- skills[,- c(3,4,5)]
skills$N_LANG <- as.factor(skills$N_LANG)
skills.list <- split(skills , skills$N_LANG)
View(skills.list)
View(skills.list[["1 language"]])
removeColumn <- function(df) {
df <- df[order('GEO')]
df <- df[,- c(1,2)]
return(df)
}
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(skills)
skills <- skills[,- c(3,4,5)]
skills$N_LANG <- as.factor(skills$N_LANG)
skills.list <- split(skills , skills$N_LANG)
removeColumn <- function(df) {
df <- df[,- c(1,2)]
return(df)
}
names <- skills.list$`1 language`$GEO
skills.list <- lapply(skills.list, removeColumn)
skills.bylang <- data.frame(`No languages` = skills.list$`No languages`, `One language` = skills.list$`1 language`, `Two language` =skills.list$`2 languages`, `Three language or more` = skills.list$`3 languages or more`)
row.names(skills.bylang) <- names
View(skills.bylang)
lang <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(lang)
lang <- skills[,- c(3,4,5)]
lang$N_LANG <- as.factor(lang$N_LANG)
lang.list <- split(lang , lang$N_LANG)
removeColumn <- function(df) {
df <- df[,- c(1,2)]
return(df)
}
names <- lang.list$`1 language`$GEO
lang.list <- lapply(lang.list, removeColumn)
lang.dist <- data.frame(`No languages` = skills.list$`No languages`, `One language` = skills.list$`1 language`, `Two language` =skills.list$`2 languages`, `Three language or more` = skills.list$`3 languages or more`)
lang <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(lang)
lang <- skills[,- c(3,4,5)]
lang <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(lang)
lang <- lang[,- c(3,4,5)]
lang$N_LANG <- as.factor(lang$N_LANG)
lang.list <- split(lang , lang$N_LANG)
removeColumn <- function(df) {
df <- df[,- c(1,2)]
return(df)
}
names <- lang.list$`1 language`$GEO
lang.list <- lapply(lang.list, removeColumn)
lang.dist <- data.frame(`No languages` = skills.list$`No languages`, `One language` = skills.list$`1 language`, `Two language` =skills.list$`2 languages`, `Three language or more` = skills.list$`3 languages or more`)
lang <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(lang)
lang <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(lang)
lang <- lang[,- c(3,4,5)]
lang$N_LANG <- as.factor(lang$N_LANG)
lang.list <- split(lang , lang$N_LANG)
removeColumn <- function(df) {
df <- df[,- c(1,2)]
return(df)
}
names <- lang.list$`1 language`$GEO
lang.list <- lapply(lang.list, removeColumn)
lang.dist <- data.frame(`No languages` = lang.list$`No languages`, `One language` = lang.list$`1 language`, `Two language` =lang.list$`2 languages`, `Three language or more` = lang.list$`3 languages or more`)
row.names(lang.dist) <- names
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/isoc_sk_dskl_i/isoc_sk_dskl_i_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(skills)
str(lang)
str(skills)
skills <- skills[,- c(1,3,4,5)]
str(skills)
View(skills)
skills.sorted = skills[order(rownames(skills)),]
View(skills.sorted)
lang.dist = lang.dist[order(rownames(lang.dist)),]
View(lang.dist)
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/isoc_sk_dskl_i/isoc_sk_dskl_i_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(skills)
skills <- skills[,- c(1,3,4,5)]
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/isoc_sk_dskl_i/isoc_sk_dskl_i_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
colnames(skills) <- skills$GEO
lang <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(lang)
lang <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(lang)
lang <- lang[,- c(3,4,5)]
lang$N_LANG <- as.factor(lang$N_LANG)
lang.list <- split(lang , lang$N_LANG)
removeColumn <- function(df) {
df <- df[,- c(1,2)]
return(df)
}
names <- lang.list$`1 language`$GEO
lang.list <- lapply(lang.list, removeColumn)
lang.dist <- data.frame(`No languages` = lang.list$`No languages`, `One language` = lang.list$`1 language`, `Two language` =lang.list$`2 languages`, `Three language or more` = lang.list$`3 languages or more`)
row.names(lang.dist) <- names
lang.dist = lang.dist[order(rownames(lang.dist)),]
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/isoc_sk_dskl_i/isoc_sk_dskl_i_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(skills)
colnames(skills) <- skills$GEO
row.names(skills) <- skills$GEO
skills <- skills[,- c(1,2,3,4,5)]
skills = skills[order(rownames(skills)),]
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/isoc_sk_dskl_i/isoc_sk_dskl_i_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/isoc_sk_dskl_i/isoc_sk_dskl_i_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(skills)
row.names(skills) <- skills$GEO
skills <- skills[,- c(1,3,4,5)]
View(skills)
skills = skills[order(rownames(skills)),]
View(skills)
names(lang.dist)
row.names(lang.dist)
lang.dist <- row.names(lang.dist)
lang <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/edat_aes_l21/edat_aes_l21_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(lang)
lang <- lang[,- c(3,4,5)]
lang$N_LANG <- as.factor(lang$N_LANG)
lang.list <- split(lang , lang$N_LANG)
removeColumn <- function(df) {
df <- df[,- c(1,2)]
return(df)
}
names <- lang.list$`1 language`$GEO
lang.list <- lapply(lang.list, removeColumn)
lang.dist <- data.frame(`No languages` = lang.list$`No languages`, `One language` = lang.list$`1 language`, `Two language` =lang.list$`2 languages`, `Three language or more` = lang.list$`3 languages or more`)
row.names(lang.dist) <- names
lang.dist = lang.dist[order(rownames(lang.dist)),]
lang.dist$GEO <- row.names(lang.dist)
View(lang.dist)
skills <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/xxx/isoc_sk_dskl_i/isoc_sk_dskl_i_1_Data.csv", stringsAsFactors = FALSE, na.strings = ":")
str(skills)
row.names(skills) <- skills$GEO
skills <- skills[,- c(1,3,4,5)]
skills = skills[order(rownames(skills)),]
View(skills)
merged <- merge(lang.dist, skills, by.x="GEO", by.y="GEO")
View(merged)
View(merged)
merged <- merged[- c(34),]
View(merged)
library(psych)
cor(merged)
psych::pairs.panels(merged)
str(merged)
library(fpp2)
library(tseries)
# Question 1
pigs
# Question 1
is.data.frame(pigs)
# Question 1
is.matrix(pigs)
# Question 1
is.list(pigs)
# Question 1
is.data.frame(pigs)
# Question 1
pigs
# Question 1
is.array(pigs)
# Question 1
data.class(pigs)
# Question 1
pigs
autoplot(pigs)
fcast.ses <- ses(pigs, h=4)
summary(fcast.ses)
# Question 2
#a
bicoal
autoplot(bicoal)
ggtsdisplay(bicoal)
#b
coalfit <- arima(bicoal, order = c(4,0,0))
checkresiduals(coalfit)
forecast(coalfit, h=3)
summary(coalfit)
# Question 3
wmurders
autoplot(wmurders)
ggtsdisplay(wmurders)
remove(list = ls())
library(psych)
data <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/Final/GrossValueAdded.csv")
pairs.panels(data)
data <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/Final/UNdata_Export_20200318_004546120.csv")
pairs.panels(data)
pairs.panels(data)
data <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/Final/UNdata_Export_20200318_004546120.csv")
data <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/Final/UNdata_Export_20200318_005306324.csv")
pairs.panels(data)
View(data)
autoplot(data$Total.Value.Added)
plot(data$Total.Value.Added)
hist(data$Total.Value.Added)
hist(log(data$Total.Value.Added))
abline()
lines(density(data$Total.Value.Added))             # add a density estimate with defaults
lines(log(density(data$Total.Value.Added)))             # add a density estimate with defaults
lines(density(log(data$Total.Value.Added)))             # add a density estimate with defaults
lines(density(log(data$Total.Value.Added), adjust=2), lty="dotted")
data <- read.csv("/Users/sobil/Downloads/Stats_Data_sets/Final/UNdata_Export_20200318_005306324.csv")
pairs.panels(data)
data1 <- data
data1$Total.Value.Added <- log(data1$Total.Value.Added)
View(data1)
View(data)
pairs.panels(data1)
View(data)
library(ggplot2)
library(ggplot2movies)
# data, aesthetics
pl <- ggplot(movies, aes(x=rating))
# geometery : Histograms basic
pl.hist <- pl + geom_histogram()
print(pl.hist)
# geometery : Histograms binwidth, coor, fill, alpha (for transperancy)
pl.hist <- pl + geom_histogram(binwidth = 0.1, color = 'blue', fill = 'yellow', alpha = 0.4)
print(pl.hist)
# lables
pl.lables <- pl.hist + xlab('Movie Rating') + ylab('Count')
print(pl.lables)
# title
pl.title <- pl.lables + ggtitle('Movie Rating Plot')
print(pl.title)
# fill based on color
pl.hist <- pl + geom_histogram(binwidth = 0.1, aes(fill=..count..))
print(pl.hist)
# lables
pl.lables <- pl.hist + xlab('Movie Rating') + ylab('Count')
print(pl.lables)
# title
pl.title <- pl.lables + ggtitle('Movie Rating Plot')
print(pl.title)
bstFits1 <- regsubsets(cellular ~
income*popul.med.age*popul.urban*popul.in.thous +
I(income^2) + I(popul.med.age^2) + I(popul.urban^2) + I(popul.in.thous^2),
data = cellular, nbest = 1, nvmax = 4)
# Concept of PARSIMONY
# checking the best fit predictors
library(leaps)
library(car)
bstFits1 <- regsubsets(cellular ~
income*popul.med.age*popul.urban*popul.in.thous +
I(income^2) + I(popul.med.age^2) + I(popul.urban^2) + I(popul.in.thous^2),
data = cellular, nbest = 1, nvmax = 4)
setwd("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Project/Multi_linear")
remove(list = ls())
#
cellular <- read.csv("Cellular.csv", stringsAsFactors = FALSE)
cellular <- cellular[,-c(2,4)]
#
other <- read.csv("Gross national income per capita (PPP int. $).csv", stringsAsFactors = FALSE)
other <- other[,-c(2,4)]
cellular <- merge(cellular, other, by = "Country.or.Area")
colnames(cellular) <- c("Country.or.Area","cellular","income")
#
other <- read.csv("Population_medain_age.csv", stringsAsFactors = FALSE)
other <- other[,-c(2,4)]
cellular <- merge(cellular, other, by = "Country.or.Area")
colnames(cellular) <- c("Country.or.Area","cellular","income","popul.med.age")
#
other <- read.csv("Population_Urban.csv", stringsAsFactors = FALSE)
other <- other[,-c(2,4)]
cellular <- merge(cellular, other, by = "Country.or.Area")
colnames(cellular) <- c("Country.or.Area","cellular","income","popul.med.age","popul.urban")
#
other <- read.csv("PopulationInThousand.csv", stringsAsFactors = FALSE)
other <- other[,-c(2,4)]
cellular <- merge(cellular, other, by = "Country.or.Area")
colnames(cellular) <- c("Country.or.Area","cellular","income","popul.med.age","popul.urban","popul.in.thous")
cellular <- cellular[,-1]
# checking distribution & outliers
summary(cellular)
boxplot(cellular$cellular) # no outliers
hist(cellular$cellular) # normally distributed
# checking correlation
library(psych)
psych::pairs.panels(cellular)
# Concept of PARSIMONY
# checking the best fit predictors
library(leaps)
library(car)
bstFits1 <- regsubsets(cellular ~
income*popul.med.age*popul.urban*popul.in.thous +
I(income^2) + I(popul.med.age^2) + I(popul.urban^2) + I(popul.in.thous^2),
data = cellular, nbest = 1, nvmax = 4)
par(mfrow = c(1,1))
subsets(bstFits1, statistic = "adjr2")
plot(bstFits1, scale = "adjr2")
subsets(bstFits1, statistic = "adjr2")
setwd("/Users/sobil/Documents/MSC/Sem 1/Statistics for Data Analytics/Lab/Project/Multi_linear")
remove(list = ls())
library(psych)
library(leaps)
library(car)
#
cellular <- read.csv("Cellular.csv", stringsAsFactors = FALSE)
cellular <- cellular[,-c(2,4)]
#
other <- read.csv("Gross national income per capita (PPP int. $).csv", stringsAsFactors = FALSE)
other <- other[,-c(2,4)]
cellular <- merge(cellular, other, by = "Country.or.Area")
colnames(cellular) <- c("Country.or.Area","cellular","income")
#
other <- read.csv("Population_medain_age.csv", stringsAsFactors = FALSE)
other <- other[,-c(2,4)]
cellular <- merge(cellular, other, by = "Country.or.Area")
colnames(cellular) <- c("Country.or.Area","cellular","income","popul.med.age")
#
other <- read.csv("Population_Urban.csv", stringsAsFactors = FALSE)
other <- other[,-c(2,4)]
cellular <- merge(cellular, other, by = "Country.or.Area")
colnames(cellular) <- c("Country.or.Area","cellular","income","popul.med.age","popul.urban")
#
other <- read.csv("PopulationInThousand.csv", stringsAsFactors = FALSE)
other <- other[,-c(2,4)]
cellular <- merge(cellular, other, by = "Country.or.Area")
colnames(cellular) <- c("Country.or.Area","cellular","income","popul.med.age","popul.urban","popul.in.thous")
cellular <- cellular[,-1]
# checking distribution & outliers
summary(cellular)
str(cellular)
sapply(cellular, sd, na.rm = TRUE)
cat("Size : ", nrow(cellular) , " obs. of " , length(cellular), "variables")
hist(cellular$cellular) # normally distributed
par(mfrow = c(1,2))
hist(cellular$cellular, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "Cellular subscription",
main = "Histogram")
lines(density(cellular$cellular), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
boxplot(cellular$cellular, main = "Box plot", ylab = "Cellular subscription") # no outliers
# checking correlation
psych::pairs.panels(cellular)
# Model 1
cellular.fit1 <- lm(cellular ~ income*popul.med.age*popul.urban*popul.in.thous + I(income^2) + I(popul.med.age^2) + I(popul.urban^2) + I(popul.in.thous^2), data = cellular)
summary(cellular.fit1)
# Using step process
cellular.fit2 <- step(cellular.fit1)
summary(cellular.fit2)
# Manually eliminating insignificant variable (concept of parsimony)
cellular.fit3 <- update(cellular.fit2, ~ . - income:popul.med.age:popul.urban)
summary(cellular.fit3)
# Using step process
cellular.fit4 <- step(cellular.fit3)
summary(cellular.fit4)
# Manually eliminating insignificant variable (concept of parsimony)
cellular.fit5 <- update(cellular.fit4, ~ . - popul.med.age:popul.in.thous)
summary(cellular.fit5)
# Using step process
cellular.fit6 <- step(cellular.fit5)
summary(cellular.fit6)
# Manually eliminating insignificant variable (concept of parsimony)
cellular.fit7 <- update(cellular.fit6, ~ . - income:popul.med.age)
summary(cellular.fit7)
# Using step process
cellular.fit8 <- step(cellular.fit7)
summary(cellular.fit8)
# Manually eliminating insignificant variable (concept of parsimony)
cellular.fit9 <- update(cellular.fit8, ~ . - popul.in.thous )
summary(cellular.fit9)
# checking plot
par(mfrow =c(2,2))
plot(cellular.fit9)
# checking statstics
# F-statistic:
# Gauss– Markov Assumptions - Errors have constant variance, which is known as homoscedasticity
ncvTest(cellular.fit9)
# There is no autocorrelation between errors ::
durbinWatsonTest(cellular.fit9)
hist(cellular.fit9$residuals) # is near to normal distribution
hist(cellular.fit9$residuals, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "Residuals",
main = "Residuals Normality check")
lines(density(cellular.fit9$residuals), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
# Predictor variables must be independent of the error term (Omitted variable bias!) ::
# We assume that our errors are normally distributed :: From Q-Q plot and histogram
par(mfrow = c(1,1))
hist(cellular.fit9$residuals, # histogram
col="peachpuff", # column color
border="black",
prob = TRUE, # show densities instead of frequencies
xlab = "Residuals",
main = "Residuals Normality check")
lines(density(cellular.fit9$residuals), # density plot
lwd = 2, # thickness of line
col = "chocolate3")
# We assume there is no multicollinearity between predictors ::
vif(cellular.fit9)
# The third assumption we make is that we have no influential data points ::
cooks.distance(cellular.fit9)
influencePlot(cellular.fit9)
# checking plot
par(mfrow =c(2,2))
plot(cellular.fit9)
# The third assumption we make is that we have no influential data points ::
cooks.distance(cellular.fit9)
influencePlot(cellular.fit9)
summary(influencePlot(cellular.fit9))
# The third assumption we make is that we have no influential data points ::
summary(cooks.distance(cellular.fit9))
# The third assumption we make is that we have no influential data points ::
summary(cooks.distance(cellular.fit9))
# again the cellular.fit9
cellular.fit9 <- lm(formula = cellular ~popul.urban + popul.med.age:popul.urban,
data = cellular)
summary(cellular.fit9)
# again the cellular.fit9
cellular.fit9 <- lm(formula = cellular ~ popul.med.age + popul.med.age:popul.urban,
data = cellular)
summary(cellular.fit9)
# The third assumption we make is that we have no influential data points ::
summary(cooks.distance(cellular.fit9))
